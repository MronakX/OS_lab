diff --git a/kernel/defs.h b/kernel/defs.h
index a73b4f7..39b326f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -160,7 +160,7 @@ int             uartgetc(void);
 // vm.c
 void            kvminit(void);
 void            kvminithart(void);
-uint64          kvmpa(uint64);
+uint64          kvmpa(pagetable_t, uint64);
 void            kvmmap(uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
@@ -178,6 +178,13 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t *         walk(pagetable_t, uint64, int);
+void            vmprint(pagetable_t);
+void            vmprint_with_depth(pagetable_t, int);
+pagetable_t     my_kvminit_kernel();
+void            my_kvmmap(pagetable_t, uint64, uint64, uint64, int);
+int             kuvmcopy(pagetable_t, pagetable_t, uint64, uint64);
+
 
 // plic.c
 void            plicinit(void);
@@ -194,6 +201,12 @@ void            virtio_disk_intr(void);
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
 
 
+//vmcopyin.c
+int             copyin_new(pagetable_t, char*, uint64, uint64);
+int             copyinstr_new(pagetable_t, char*, uint64, uint64);
+
+
+
 
 // stats.c
 void            statsinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 0e8762f..271db0c 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -56,6 +56,8 @@ exec(char *path, char **argv)
       goto bad;
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
       goto bad;
+    if(sz1 > PLIC)
+      goto bad;
   }
   iunlockput(ip);
   end_op();
@@ -96,6 +98,9 @@ exec(char *path, char **argv)
     goto bad;
   if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
     goto bad;
+  
+
+  kuvmcopy(pagetable, p->k_pagetable, sz, 0);
 
   // arguments to user main(argc, argv)
   // argc is returned via the system call return
@@ -116,6 +121,8 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1) vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index dab1e1d..1709671 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -34,12 +34,14 @@ procinit(void)
       // Allocate a page for the process's kernel stack.
       // Map it high in memory, followed by an invalid
       // guard page.
+      /*
       char *pa = kalloc();
       if(pa == 0)
         panic("kalloc");
       uint64 va = KSTACK((int) (p - proc));
       kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
       p->kstack = va;
+      */
   }
   kvminithart();
 }
@@ -121,6 +123,20 @@ found:
     return 0;
   }
 
+  p->k_pagetable = my_kvminit_kernel();
+  if(p->k_pagetable == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
+  char *pa = kalloc();
+  if(pa == 0)
+    panic("kalloc");
+  uint64 va = KSTACK((int) (p - proc));//may be wrong
+  my_kvmmap(p->k_pagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+  p->kstack = va;
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -130,6 +146,21 @@ found:
   return p;
 }
 
+void free_k_pagetable(pagetable_t pagetable)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+      free_k_pagetable((pagetable_t)child);
+      pagetable[i] = 0;
+    }
+  }
+  kfree((void*)pagetable);
+}
+
 // free a proc structure and the data hanging from it,
 // including user pages.
 // p->lock must be held.
@@ -139,8 +170,19 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  
+  pte_t *pte = walk(p->k_pagetable, p->kstack, 0);
+  if(pte == 0)
+    panic("pte 0 panic");
+  //printf("%p\n", pte);
+  kfree((void*)PTE2PA(*pte));
+  p->kstack = 0;
+  
+
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
+  if(p->k_pagetable)
+    free_k_pagetable(p->k_pagetable);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -152,6 +194,8 @@ freeproc(struct proc *p)
   p->state = UNUSED;
 }
 
+
+
 // Create a user page table for a given process,
 // with no user memory, but with trampoline pages.
 pagetable_t
@@ -220,7 +264,7 @@ userinit(void)
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
-
+  kuvmcopy(p->pagetable, p->k_pagetable, PGSIZE, 0);
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -277,6 +321,8 @@ fork(void)
 
   np->parent = p;
 
+  kuvmcopy(np->pagetable, np->k_pagetable, np->sz, 0);
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -473,10 +519,18 @@ scheduler(void)
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
-        swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
+
+        //MODIFY!!
+        w_satp(MAKE_SATP(p->k_pagetable));
+        sfence_vma(); // flush TLB，刷新TLB快表
+        swtch(&c->context, &p->context); // 进程运行
+        kvminithart(); 
+        //MODIFY!!
+
+
         c->proc = 0;
 
         found = 1;
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..34277e6 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -98,6 +98,9 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
+
+  pagetable_t k_pagetable;
+
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..f69e8de 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -49,6 +49,14 @@ sys_sbrk(void)
   addr = myproc()->sz;
   if(growproc(n) < 0)
     return -1;
+
+  if(n > 0)
+  {
+    if(PGROUNDUP(addr + n) >= PLIC)
+      return -1;
+    kuvmcopy(myproc()->pagetable, myproc()->k_pagetable, n, addr);
+  }
+  
   return addr;
 }
 
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
index 06e0645..241cfa7 100644
--- a/kernel/virtio_disk.c
+++ b/kernel/virtio_disk.c
@@ -8,10 +8,13 @@
 
 #include "types.h"
 #include "riscv.h"
-#include "defs.h"
+
 #include "param.h"
 #include "memlayout.h"
 #include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
 #include "sleeplock.h"
 #include "fs.h"
 #include "buf.h"
@@ -203,7 +206,7 @@ virtio_disk_rw(struct buf *b, int write)
 
   // buf0 is on a kernel stack, which is not direct mapped,
   // thus the call to kvmpa().
-  disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &buf0);
+  disk.desc[idx[0]].addr = (uint64) kvmpa(myproc()->k_pagetable,(uint64) &buf0);
   disk.desc[idx[0]].len = sizeof(buf0);
   disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
   disk.desc[idx[0]].next = idx[1];
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..477e0a0 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,7 +5,7 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
-
+//#include "vmcopyin.c"
 /*
  * the kernel's page table.
  */
@@ -126,17 +126,17 @@ kvmmap(uint64 va, uint64 pa, uint64 sz, int perm)
 // addresses on the stack.
 // assumes va is page aligned.
 uint64
-kvmpa(uint64 va)
+kvmpa(pagetable_t pagetable, uint64 va)
 {
   uint64 off = va % PGSIZE;
   pte_t *pte;
   uint64 pa;
   
-  pte = walk(kernel_pagetable, va, 0);
+  pte = walk(pagetable, va, 0);
   if(pte == 0)
-    panic("kvmpa");
+    panic("kvmpa1");
   if((*pte & PTE_V) == 0)
-    panic("kvmpa");
+    panic("kvmpa2");
   pa = PTE2PA(*pte);
   return pa+off;
 }
@@ -335,6 +335,22 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+kuvmcopy(pagetable_t pagetable, pagetable_t k_pagetable, uint64 sz, uint64 start)
+{
+  uint64 i;
+  pte_t *pte;
+  pte_t *k_pte;
+  for(i = start; i < start + sz; i += PGSIZE){
+    if((pte = walk(pagetable, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((k_pte = walk(k_pagetable, i, 1)) == 0)
+      panic("uvmcopy: k_pte can't alloc");
+    *k_pte = (*pte) & (~PTE_U);
+  }
+  return 0;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -379,6 +395,7 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
+  /*
   uint64 n, va0, pa0;
 
   while(len > 0){
@@ -396,6 +413,8 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
     srcva = va0 + PGSIZE;
   }
   return 0;
+  */
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -405,6 +424,7 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
+  /*
   uint64 n, va0, pa0;
   int got_null = 0;
 
@@ -439,4 +459,92 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   } else {
     return -1;
   }
+  */
+  return copyinstr_new(pagetable, dst, srcva, max); 
+}
+/*
+void
+freewalk(pagetable_t pagetable)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+      freewalk((pagetable_t)child);
+      pagetable[i] = 0;
+    } else if(pte & PTE_V){
+      panic("freewalk: leaf");
+    }
+  }
+  kfree((void*)pagetable);
+}*/
+
+void vmprint(pagetable_t pagetable)
+{
+  printf("page table %p\n", pagetable);
+  vmprint_with_depth(pagetable, 0);
+}
+
+void vmprint_with_depth(pagetable_t pagetable, int depth)
+{
+  for(int i = 0; i < 512; i++){
+    
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V)){
+      uint64 child = PTE2PA(pte);
+      if(depth == 0)
+        printf("..%d: pte %p pa %p\n", i, pte, child);
+      if(depth == 1)
+        printf(".. ..%d: pte %p pa %p\n", i, pte, child);
+      if(depth == 2)
+        printf(".. .. ..%d: pte %p pa %p\n", i, pte, child);
+      if((pte & (PTE_R|PTE_W|PTE_X)) == 0)
+        vmprint_with_depth((pagetable_t)child, depth+1);
+    }
+  }
+}
+
+
+void
+my_kvmmap(pagetable_t k_pagetable, uint64 va, uint64 pa, uint64 sz, int perm)
+{
+  if(mappages(k_pagetable, va, sz, pa, perm) != 0)
+    panic("my_kvmmap");
+}
+
+/*
+ * create a direct-map page table for the kernel.
+ */
+pagetable_t
+my_kvminit_kernel()
+{
+  pagetable_t k_pagetable = (pagetable_t) uvmcreate();
+  if(k_pagetable == 0)
+    return 0;
+  memset(k_pagetable, 0, PGSIZE);
+  // uart registers
+  my_kvmmap(k_pagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+
+  // virtio mmio disk interface
+  my_kvmmap(k_pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+
+  // CLINT
+  my_kvmmap(k_pagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+
+  // PLIC
+  my_kvmmap(k_pagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+
+  // map kernel text executable and read-only.
+  my_kvmmap(k_pagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+
+  // map kernel data and the physical RAM we'll make use of.
+  my_kvmmap(k_pagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  my_kvmmap(k_pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+
+  return k_pagetable;
 }
diff --git a/user/usertests.c b/user/usertests.c
index 004c948..56e8101 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -2639,6 +2639,7 @@ main(int argc, char *argv[])
     char *s;
   } tests[] = {
     {execout, "execout"},
+    
     {copyin, "copyin"},
     {copyout, "copyout"},
     {copyinstr1, "copyinstr1"},
@@ -2694,6 +2695,7 @@ main(int argc, char *argv[])
     {iref, "iref"},
     {forktest, "forktest"},
     {bigdir, "bigdir"}, // slow
+    
     { 0, 0},
   };
 
