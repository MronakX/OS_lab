diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..f9a42fb 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            increase_cnt(uint64);
+int             cowfault(pagetable_t, uint64);
+
 
 // log.c
 void            initlog(int, struct superblock*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..968f862 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -18,11 +18,20 @@ struct run {
   struct run *next;
 };
 
+uint64 cnt[(PHYSTOP) / PGSIZE];
+
 struct {
   struct spinlock lock;
   struct run *freelist;
 } kmem;
 
+void increase_cnt(uint64 pa)
+{
+  acquire(&kmem.lock);
+  cnt[pa / PGSIZE]++;
+  release(&kmem.lock);
+}
+
 void
 kinit()
 {
@@ -36,7 +45,10 @@ freerange(void *pa_start, void *pa_end)
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
   for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  {
+    cnt[(uint64)p / PGSIZE] = 1; //initialization
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by v,
@@ -51,10 +63,21 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  acquire(&kmem.lock);
+  cnt[(uint64)pa / PGSIZE]--;
+  if(cnt[(uint64)pa / PGSIZE] >= 1)//not free yet
+  {
+    release(&kmem.lock);
+    return;
+  }
+
+
+  release(&kmem.lock);
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
-  r = (struct run*)pa;
+  r = (struct run*)pa; //TBD
 
   acquire(&kmem.lock);
   r->next = kmem.freelist;
@@ -73,10 +96,14 @@ kalloc(void)
   acquire(&kmem.lock);
   r = kmem.freelist;
   if(r)
+  {
+    cnt[(uint64)r /PGSIZE] = 1;
     kmem.freelist = r->next;
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..85d9f4b 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -332,6 +332,8 @@ sfence_vma()
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
 
+#define PTE_C (1L << 8)
+
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..91037d1 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,7 +65,15 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  }
+  else if(r_scause() == 13 || r_scause() == 15)
+  {
+    if(cowfault(p->pagetable, r_stval()) == -1)
+    {
+      p->killed = 1;
+    }
+  }
+  else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..6779b21 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -156,8 +156,8 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
   for(;;){
     if((pte = walk(pagetable, a, 1)) == 0)
       return -1;
-    if(*pte & PTE_V)
-      panic("remap");
+    //if(*pte & PTE_V)
+      //panic("remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if(a == last)
       break;
@@ -311,7 +311,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -319,12 +319,19 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
+
+    *pte = ((*pte) & ~(PTE_W)) | (PTE_C);
+
     flags = PTE_FLAGS(*pte);
+
+    /*
     if((mem = kalloc()) == 0)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    */
+    increase_cnt((uint64)pa);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(mem);
       goto err;
     }
   }
@@ -358,6 +365,12 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+
+    if(va0 > MAXVA)
+      return -1;
+    if(cowfault(pagetable, va0) == -1)
+      return -1;
+
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
@@ -440,3 +453,37 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int cowfault(pagetable_t pagetable, uint64 va)
+{
+  va = PGROUNDDOWN(va);
+  if (va >= MAXVA)
+    return -1;
+  pte_t *pte = walk(pagetable, va, 0);
+  if (pte == 0)
+    return -1;
+  if ((*pte & PTE_U) == 0 || (*pte & PTE_V) == 0)
+    return -1;
+
+  uint64 old_pa = PTE2PA(*pte);
+  uint64 old_flag = PTE_FLAGS(*pte);
+
+  if((old_flag & PTE_C) == 0)//not cow
+    return -2;
+
+
+  uint64 new = (uint64)kalloc();
+  if (new == 0){
+    return -1;
+  }
+ 
+  memmove((void *)new, (void *)old_pa, PGSIZE);
+  if(mappages(pagetable, va, PGSIZE, (uint64)new, (old_flag)|PTE_W) < 0)
+	{
+    kfree((void *)old_pa);
+	  return -1;
+	}
+
+  kfree((void *)old_pa);
+  return 0;
+}
\ No newline at end of file
